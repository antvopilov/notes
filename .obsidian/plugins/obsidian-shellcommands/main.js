/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var child_process = require('child_process');
var electron = require('electron');
var os = require('os');
var path = require('path');
var fs = require('fs');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);
var fs__namespace = /*#__PURE__*/_interopNamespace(fs);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function getVaultAbsolutePath(app) {
    // Original code was copied 2021-08-22 from https://github.com/phibr0/obsidian-open-with/blob/84f0e25ba8e8355ff83b22f4050adde4cc6763ea/main.ts#L66-L67
    // But the code has been rewritten 2021-08-27 as per https://github.com/obsidianmd/obsidian-releases/pull/433#issuecomment-906087095
    let adapter = app.vault.adapter;
    if (adapter instanceof obsidian.FileSystemAdapter) {
        return adapter.getBasePath();
    }
    return null;
}
/**
 * For some reason there is no Platform.isWindows .
 */
function isWindows() {
    return process.platform === "win32";
}
function getView(app) {
    let view = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (!view) {
        console.log("getView(): Could not get a view. Will return null.");
        return null;
    }
    return view;
}
function getEditor(app) {
    let view = getView(app);
    if (null === view) {
        // Could not get a view.
        return null;
    }
    // Ensure that view.editor exists! It exists at least if this is a MarkDownView.
    if ("editor" in view) {
        // Good, it exists.
        // @ts-ignore We already know that view.editor exists.
        return view.editor;
    }
    // Did not find an editor.
    console.log("getEditor(): 'view' does not have a property named 'editor'. Will return null.");
    return null;
}
function cloneObject(object) {
    return Object.assign({}, object);
}
/**
 * Same as normalizePath(), but fixes these glitches:
 * - Leading forward slashes / backward slashes should not be removed.
 * - \ should not be converted to / if platform is Windows. In other words, / should be converted to \ if platform is Windows.
 *
 * TODO: I've opened a discussion about this on Obsidian's forums. If anything new comes up in the discussion, make changes accordingly. https://forum.obsidian.md/t/normalizepath-removes-a-leading/24713
 */
function normalizePath2(path) {
    // 1. Preparations
    path = path.trim();
    let leading_slashes_regexp = /^[/\\]*/g; // Get as many / or \ slashes as there are in the very beginning of path. Can also be "" (an empty string).
    let leading_slashes = leading_slashes_regexp.exec(path)[0];
    // 2. Run the original normalizePath()
    path = obsidian.normalizePath(path);
    // 3. Fixes
    // Check that correct slashes are used.
    if (isWindows()) {
        // The platform is Windows.
        // Convert / to \
        path = path.replace(/\//g, "\\"); // Need to use a regexp instead of a normal "/" -> "\\" replace because the normal replace would only replace first occurrence of /.
        leading_slashes = leading_slashes.replace(/\//g, "\\"); // Same here.
    }
    // Now ensure that path still contains leading slashes (if there were any before calling normalizePath()).
    // Check that the path should have a similar set of leading slashes at the beginning. It can be at least "/" (on linux/Mac), or "\\" (on Windows when it's a network path), in theory even "///" or "\\\\\" whatever.
    // normalizePath() seems to remove leading slashes (and they are needed to be re-added), but it's needed to check first, otherwise the path would have double leading slashes if normalizePath() gets fixed in the future.
    if (leading_slashes.length && path.slice(0, leading_slashes.length) !== leading_slashes) {
        // The path does not contain the required set of leading slashes, so add them.
        path = leading_slashes + path;
    }
    // 4. Done
    return path;
}
function joinObjectProperties(object, glue) {
    let result = "";
    for (let property_name in object) {
        if (result.length) {
            result += glue;
        }
        // @ts-ignore
        result += object[property_name];
    }
    return result;
}
/**
 * Removes all duplicates from an array.
 *
 * Idea is copied 2021-10-06 from https://stackoverflow.com/a/33121880/2754026
 */
function uniqueArray(array) {
    return [...new Set(array)];
}

let shell_command_variable_instructions = [];
function getShellCommandVariableInstructions() {
    sort_shell_command_variable_instructions(); // Make sure the variables are in correct order.
    return shell_command_variable_instructions;
}
function addShellCommandVariableInstructions(variable_name, instructions) {
    shell_command_variable_instructions.push({
        variable_name: variable_name,
        instructions: instructions,
    });
}
/**
 * Sorts shell_command_variable_instructions alphabetically based on variable_name.
 */
function sort_shell_command_variable_instructions() {
    shell_command_variable_instructions.sort((a, b) => {
        if (a.variable_name < b.variable_name) {
            return -1;
        }
        else if (a.variable_name > b.variable_name) {
            return 1;
        }
        return 0;
    });
}

class ShellCommandVariable {
    constructor(plugin) {
        this.parameter_separator = ":";
        this.error_messages = [];
        /**
         * A definition for what parameters this variables takes.
         * @protected
         */
        this.parameters = {};
        /**
         * This contains actual values for parameters.
         * @protected
         */
        this.arguments = {};
        this.plugin = plugin;
        this.app = plugin.app;
    }
    getPattern() {
        const error_prefix = this.name + ".getPattern(): ";
        let pattern = '\{\{' + this.name;
        for (let parameter_name in this.parameters) {
            const parameter = this.parameters[parameter_name];
            let parameter_type_pattern = this.parameter_separator; // Here this.parameter_separator (= : ) is included in the parameter value just so that it's not needed to do nested parenthesis to accomplish possible optionality: (:())?. parseShellCommandVariables() will remove the leading : .
            // Check should we use parameter.options or parameter.type.
            if (undefined === parameter.options &&
                undefined === parameter.type) {
                // Neither is defined :(
                throw Error(error_prefix + "Parameter '" + parameter_name + "' should define either 'type' or 'options', neither is defined!");
            }
            else if (undefined !== parameter.options &&
                undefined !== parameter.type) {
                // Both are defined :(
                throw Error(error_prefix + "Parameter '" + parameter_name + "' should define either 'type' or 'options', not both!");
            }
            else if (undefined !== parameter.options) {
                // Use parameter.options
                parameter_type_pattern += parameter.options.join("|" + this.parameter_separator); // E.g. "absolute|:relative" for {{file_path:mode}} variable's 'mode' parameter.
            }
            else {
                // Use parameter.type
                switch (parameter.type) {
                    case "string":
                        parameter_type_pattern += ".*?";
                        break;
                    case "integer":
                        parameter_type_pattern += "\\d+";
                        break;
                    default:
                        throw Error(error_prefix + "Parameter '" + parameter_name + "' has an unrecognised type: " + parameter.type);
                }
            }
            // Add the subpattern to 'pattern'.
            pattern += "(" + parameter_type_pattern + ")";
            if (!parameter.required) {
                // Make the parameter optional.
                pattern += "?";
            }
        }
        pattern += '\}\}';
        return pattern;
    }
    getParameterNames() {
        return Object.getOwnPropertyNames(this.parameters);
    }
    /**
     * @param parameter_name
     * @param argument At this point 'argument' is always a string, but this method may convert it to another data type, depending on the parameter's data type.
     */
    setArgument(parameter_name, argument) {
        var _a;
        const parameter_type = (_a = this.parameters[parameter_name].type) !== null && _a !== void 0 ? _a : "string"; // If the variable uses "options" instead of "type", then the type is always "string".
        switch (parameter_type) {
            case "string":
                this.arguments[parameter_name] = argument;
                break;
            case "integer":
                this.arguments[parameter_name] = parseInt(argument);
                break;
        }
    }
    /**
     * Note that error messages can only exist after getValue() is called!
     */
    getErrorMessages() {
        return this.error_messages;
    }
    newErrorMessage(message) {
        let prefix = "{{" + this.name + "}}: ";
        this.error_messages.push(prefix + message);
    }
}

class ShellCommandVariable_FolderName extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "folder_name";
    }
    getValue() {
        let file = this.app.workspace.getActiveFile();
        if (!file) {
            this.newErrorMessage("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
        if (!file.parent) {
            this.newErrorMessage("The current file does not have a parent for some strange reason.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
        return file.parent.name;
    }
}
addShellCommandVariableInstructions("{{folder_name}}", "Gives the current file's parent folder name. No ancestor folders are included.");

class ShellCommandVariable_Selection extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "selection";
    }
    getValue() {
        // Check that we are able to get a view
        let view = getView(this.app);
        if (null === view) {
            // Nope.
            this.newErrorMessage("Could not get a view instance! Please raise an issue in GitHub.");
            return null;
        }
        // Check that we are able to get an editor
        let editor = getEditor(this.app);
        if (null === editor) {
            // Nope.
            this.newErrorMessage("Could not get an editor instance! Please raise an issue in GitHub.");
            return null;
        }
        // Check the view mode
        let view_mode = view.getMode(); // "preview" or "source" (can also be "live" but I don't know when that happens)
        switch (view_mode) {
            case "preview":
                // The leaf is in preview mode, which makes things difficult.
                // We could still return view.editor, but it does not work at least for getting selected text, maybe for other things, but currently this function is only used for getting selected text.
                // At this moment, just return null to indicate that we were not able to offer an editor instance which could work reliably on text selections.
                // FIXME: Make it possible to use this feature also in preview mode.
                console.log("ShellCommandVariable_Selection: 'view' is in preview mode, and the poor guy who wrote this code, does not know how to return an editor instance that could be used for getting text selection.");
                this.newErrorMessage("You need to turn editing mode on, as I'm not able to get selected text when in preview mode. Blame the one who developed this plugin! This should be fixed in the future.");
                return null;
            case "source":
                // Good, the editor is in "source" mode, so it's possible to get a selection.
                if (editor.somethingSelected()) {
                    return editor.getSelection();
                }
                return "";
        }
    }
}
addShellCommandVariableInstructions("{{selection}}", "Gives the currently selected text. Atm only works in editing mode, not in preview mode!");

class ShellCommandVariable_FilePath extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "file_path";
        this.parameters = {
            mode: {
                options: ["absolute", "relative"],
                required: true,
            },
        };
    }
    getValue() {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file) {
            switch (this.arguments.mode.toLowerCase()) {
                case "absolute":
                    return normalizePath2(getVaultAbsolutePath(this.app) + "/" + active_file.path);
                case "relative":
                    return normalizePath2(active_file.path); // Normalize to get a correct slash depending on platform. On Windows it should be \ .
            }
        }
        else {
            this.newErrorMessage("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
    }
}
addShellCommandVariableInstructions("{{file_path:relative}} or {{file_path:absolute}}", "Gives path to the current file, either as absolute from the root of the file system, or as relative from the root of the Obsidian vault.");

class ShellCommandVariable_Clipboard extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "clipboard";
    }
    getValue() {
        return electron.clipboard.readText();
    }
}
addShellCommandVariableInstructions("{{clipboard}}", "Gives the content you last copied to your clipboard.");

class ShellCommandVariable_Date extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "date";
        this.parameters = {
            format: {
                type: "string",
                required: true,
            },
        };
    }
    getValue() {
        return obsidian.moment().format(this.arguments.format);
    }
}
addShellCommandVariableInstructions("{{date:format}}", "Gives a date/time stamp as per your liking. The \"format\" part can be customized and is mandatory. Formatting options: https://momentjs.com/docs/#/displaying/format/");

class ShellCommandVariable_VaultPath extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "vault_path";
    }
    getValue() {
        return getVaultAbsolutePath(this.app);
    }
}
addShellCommandVariableInstructions("{{vault_path}}", "Gives the Obsidian vault's absolute path from the root of the filesystem. This is the same that is used as a default working directory if you do not define one manually. If you define a working directory manually, this variable won't give you your manually defined directory, it always gives the vault's root directory.");

class ShellCommandVariable_FileName extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "file_name";
    }
    getValue() {
        let file = this.app.workspace.getActiveFile();
        if (!file) {
            this.newErrorMessage("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
        return file.name;
    }
}
addShellCommandVariableInstructions("{{file_name}}", "Gives the current file name with a file extension. If you need it without the extension, use {{title}} instead.");

class ShellCommandVariable_FolderPath extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "folder_path";
        this.parameters = {
            mode: {
                options: ["absolute", "relative"],
                required: true,
            }
        };
    }
    getValue() {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file) {
            if (active_file.parent) {
                let folder = active_file.parent;
                switch (this.arguments.mode.toLowerCase()) {
                    case "absolute":
                        return normalizePath2(getVaultAbsolutePath(this.app) + "/" + folder.path);
                    case "relative":
                        if (folder.isRoot()) {
                            // Obsidian API does not give a correct folder.path value for the vault's root folder.
                            // TODO: See this discussion and apply possible changes if something will come up: https://forum.obsidian.md/t/vault-root-folders-relative-path-gives/24857
                            return ".";
                        }
                        else {
                            // This is a normal subfolder
                            return normalizePath2(folder.path); // Normalize to get a correct slash between directories depending on platform. On Windows it should be \ .
                        }
                }
            }
            else {
                this.newErrorMessage("The current file does not have a parent for some strange reason.");
                return null; // null indicates that getting a value has failed and the command should not be executed.
            }
        }
        else {
            this.newErrorMessage("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
    }
}
addShellCommandVariableInstructions("{{folder_path:relative}} or {{folder_path:absolute}}", "Gives path to the current file's parent folder, either as absolute from the root of the file system, or as relative from the root of the Obsidian vault.");

class ShellCommandVariable_Tags extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "tags";
        this.parameters = {
            separator: {
                type: "string",
                required: true,
            }
        };
    }
    getValue() {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file) {
            // We do have an active file
            let cache = this.app.metadataCache.getFileCache(active_file);
            let tags = uniqueArray(obsidian.getAllTags(cache)); // If a tag is defined multiple times in the same file, getTags() returns it multiple times, so use uniqueArray() to iron out duplicates.
            // Remove preceding hash characters. E.g. #tag becomes tag
            tags.forEach((tag, index) => {
                tags[index] = tag.replace("#", "");
            });
            return tags.join(this.arguments.separator);
        }
        else {
            // No file is active at the moment
            this.newErrorMessage("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
    }
}
addShellCommandVariableInstructions("{{tags:separator}}", "Gives all tags defined in the current note. Replace the \"separator\" part with a comma, space or whatever characters you want to use as a separator between tags. A separator is always needed to be defined.");

class ShellCommandVariable_Title extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "title";
    }
    getValue() {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file) {
            return active_file.basename;
        }
        this.newErrorMessage("No file is active at the moment. Open a file or click a pane that has a file open.");
        return null;
    }
}
addShellCommandVariableInstructions("{{title}}", "Gives the current file name without a file extension. If you need it with the extension, use {{file_name}} instead.");

class ShellCommandVariable_Workspace extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "workspace";
    }
    getValue() {
        var _a, _b, _c;
        // Idea how to access the workspaces plugin is copied 2021-09-15 from https://github.com/Vinzent03/obsidian-advanced-uri/blob/f7ef80d5252481242e69496208e925874209f4aa/main.ts#L168-L179
        // @ts-ignore internalPlugins exists although it's not in obsidian.d.ts.
        let workspaces_plugin = (_b = (_a = this.app.internalPlugins) === null || _a === void 0 ? void 0 : _a.plugins) === null || _b === void 0 ? void 0 : _b.workspaces;
        if (!workspaces_plugin) {
            this.newErrorMessage("Workspaces core plugin is not found for some reason. Please raise an issue in GitHub.");
            return null;
        }
        else if (!workspaces_plugin.enabled) {
            this.newErrorMessage("Workspaces core plugin is not enabled.");
            return null;
        }
        let workspace_name = (_c = workspaces_plugin.instance) === null || _c === void 0 ? void 0 : _c.activeWorkspace;
        if (!workspace_name) {
            this.newErrorMessage("Could not figure out the current workspace's name. Probably you have not loaded a workspace. You can do it e.g. via \"Manage workspaces\" from the left side panel.");
            return null;
        }
        // All ok
        return workspace_name;
    }
}
addShellCommandVariableInstructions("{{workspace}}", "Gives the current workspace's name, if the Workspaces core plugin is enabled.");

/**
 * @param plugin
 * @param command
 * @return string|string[] If parsing fails, an array of string error messages is returned. If the parsing succeeds, the parsed shell command will be returned just as a string, not in an array.
 */
function parseShellCommandVariables(plugin, command) {
    let shell_variables = [
        new ShellCommandVariable_Clipboard(plugin),
        new ShellCommandVariable_Date(plugin),
        new ShellCommandVariable_FileName(plugin),
        new ShellCommandVariable_FilePath(plugin),
        new ShellCommandVariable_FolderName(plugin),
        new ShellCommandVariable_FolderPath(plugin),
        new ShellCommandVariable_Selection(plugin),
        new ShellCommandVariable_Tags(plugin),
        new ShellCommandVariable_Title(plugin),
        new ShellCommandVariable_VaultPath(plugin),
        new ShellCommandVariable_Workspace(plugin),
    ];
    let parsed_command = command; // Create a copy of the variable because we don't want to alter the original value of 'command' during iterating its regex matches.
    for (let variable_index in shell_variables) {
        let variable = shell_variables[variable_index];
        let pattern = new RegExp(variable.getPattern(), "ig"); // i: case-insensitive; g: match all occurrences instead of just the first one.
        const parameter_names = variable.getParameterNames();
        let _arguments; // Need to prefix with _ because JavaScript reserves the variable name 'arguments'.
        while ((_arguments = pattern.exec(command)) !== null) {
            const substitute = _arguments.shift(); // '_arguments[0]' contains the whole match, not just an argument. Get it and remove it from '_arguments'.
            // Remove stuff that should not be iterated in the next loop.
            // "If the property which you are trying to delete does not exist, delete will not have any effect and will return true." This is good. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete
            delete _arguments["groups"];
            delete _arguments["index"];
            delete _arguments["input"];
            // Iterate all arguments
            for (let i in _arguments) {
                // Check that the argument is not omitted. It can be omitted (= undefined), if the parameter is optional.
                if (undefined !== _arguments[i]) {
                    // The argument is present.
                    const argument = _arguments[i].slice(1); // .slice(1): Remove a preceding :
                    const parameter_name = parameter_names[i];
                    variable.setArgument(parameter_name, argument);
                }
            }
            // Render the variable
            let variable_value = variable.getValue();
            if (variable.getErrorMessages().length) {
                // There has been a problem and executing the command should be cancelled.
                console.log("Parsing command " + command + " failed.");
                return variable.getErrorMessages(); // Returning now prevents parsing rest of the variables.
            }
            else {
                parsed_command = parsed_command.replace(substitute, variable_value);
            }
        }
    }
    return parsed_command;
}

function newShellCommandConfiguration(shell_command = "") {
    return {
        shell_command: shell_command,
        alias: "",
        confirm_execution: false,
        ignore_error_codes: [],
        output_channels: {
            stdout: "ignore",
            stderr: "notification",
        },
        output_channel_order: "stdout-first",
    };
}

function RunMigrations(plugin) {
    return __awaiter(this, void 0, void 0, function* () {
        let save = MigrateCommandsToShellCommands(plugin);
        save || (save = EnsureShellCommandsHaveAllFields(plugin));
        if (save) {
            // Only save if there were changes to configuration.
            console.log("Saving migrations...");
            yield plugin.saveSettings();
            console.log("Migrations saved...");
        }
    });
}
function MigrateCommandsToShellCommands(plugin) {
    let count_shell_commands = plugin.settings.commands.length;
    let save = false;
    if (0 < count_shell_commands) {
        let count_empty_commands = 0; // A counter for empty or null commands
        console.log("settings.commands is not empty, will migrate " + count_shell_commands + " commands to settings.shell_commands.");
        for (let shell_command_id in plugin.settings.commands) {
            let shell_command = plugin.settings.commands[shell_command_id];
            // Ensure that the command is not empty. Just in case.
            if (null === shell_command || 0 === shell_command.length) {
                // The command is empty
                console.log("Migration failure for shell command #" + shell_command_id + ": The original shell command string is empty, so it cannot be migrated.");
                count_empty_commands++;
            }
            else if (undefined !== plugin.settings.shell_commands[shell_command_id]) {
                // A command with the same id already exists
                console.log("Migration failure for shell command #" + shell_command_id + ": A shell command with same ID already exists in settings.shell_commands.");
            }
            else {
                // All OK, migrate.
                plugin.settings.shell_commands[shell_command_id] = newShellCommandConfiguration(shell_command); // Creates a shell command with default values and defines the command for it.
                delete plugin.settings.commands[shell_command_id]; // Leaves a null in place, but we can deal with it by deleting the whole array if it gets empty.
                count_empty_commands++; // Account the null generated on the previous line.
                save = true;
                console.log("Migrated shell command #" + shell_command_id + ": " + shell_command);
            }
        }
        if (count_empty_commands === count_shell_commands) {
            // The whole commands array now contains only empty/null commands.
            // Delete it.
            delete plugin.settings.commands;
        }
    }
    else {
        console.log("settings.commands is empty, so no need to migrate commands. Good thing! :)");
    }
    return save;
}
/**
 * This is a general migrator that adds new, missing properties to ShellCommandConfiguration objects. This is not tied to any specific version update, unlike MigrateCommandsToShellCommands().
 *
 * @param plugin
 * @constructor
 */
function EnsureShellCommandsHaveAllFields(plugin) {
    let save = false;
    let shell_command_default_configuration = newShellCommandConfiguration();
    let shell_command_id;
    let shell_command_configurations = plugin.getShellCommands();
    for (shell_command_id in shell_command_configurations) {
        let shell_command_configuration = shell_command_configurations[shell_command_id];
        for (let property_name in shell_command_default_configuration) {
            // @ts-ignore property_default_value can have (almost) whatever datatype
            let property_default_value = shell_command_default_configuration[property_name];
            // @ts-ignore
            if (undefined === shell_command_configuration[property_name]) {
                // This shell command does not have this property.
                // Add the property to the shell command and use a default value.
                console.log("EnsureShellCommandsHaveAllFields(): Shell command #" + shell_command_id + " does not have property '" + property_name + "'. Will create the property and assign a default value '" + property_default_value + "'.");
                // @ts-ignore
                shell_command_configuration[property_name] = property_default_value;
                save = true;
            }
        }
    }
    return save;
}

const DEFAULT_SETTINGS = {
    working_directory: "",
    preview_variables_in_command_palette: true,
    shell_commands: {},
    error_message_duration: 20,
    notification_message_duration: 10,
    // Legacy:
    commands: [] // Deprecated, but must be present in the default values as long as migrating from commands to shell_commands is supported.
};

class OutputChannelDriver {
    /**
     * Can be overridden in child classes in order to vary the title depending on output_stream.
     * @param output_stream
     */
    getTitle(output_stream) {
        return this.title;
    }
    initialize(plugin) {
        this.plugin = plugin;
        this.app = plugin.app;
    }
}

class OutputChannelDriver_Notification extends OutputChannelDriver {
    getTitle(output_stream) {
        switch (output_stream) {
            case "stdout":
                return "Notification balloon";
            case "stderr":
                return "Error balloon";
        }
    }
    handle(output, error_code) {
        // Iterate output streams.
        // There can be both "stdout" and "stderr" present at the same time, or just one of them. If both are present, two
        // notifications will be created.
        let output_stream_name;
        for (output_stream_name in output) {
            let output_message = output[output_stream_name];
            switch (output_stream_name) {
                case "stdout":
                    // Normal output
                    this.plugin.newNotification(output_message);
                    break;
                case "stderr":
                    // Error output
                    this.plugin.newError("[" + error_code + "]: " + output_message);
                    break;
            }
        }
    }
}

class OutputChannelDriver_CurrentFile extends OutputChannelDriver {
    handle(output) {
        let editor = getEditor(this.app);
        let view = getView(this.app);
        // There can be both "stdout" and "stderr" present at the same time, or just one of them. If both are present, they
        // will be joined together with " " as a separator.
        let output_message = joinObjectProperties(output, " ");
        if (null === editor) {
            // For some reason it's not possible to get an editor.
            this.plugin.newError("Could not get an editor instance! Please raise an issue in GitHub. The command output is in the next error box:");
            this.plugin.newError(output_message); // Good to output it at least some way.
            console.log("OutputChannelDriver_CurrentFile: Could not get an editor instance.");
            return;
        }
        // Check if the view is in source mode
        if (null === view) {
            // For some reason it's not possible to get an editor, but it's not a big problem.
            console.log("OutputChannelDriver_CurrentFile: Could not get a view instance.");
        }
        else {
            // We do have a view
            if ("source" !== view.getMode()) {
                // Warn that the output might go to an unexpected place in the note file.
                this.plugin.newNotification("Note that your active note is not in 'Edit' mode! The output comes visible when you switch to 'Edit' mode again!");
            }
        }
        // Insert into the current file
        this.insertIntoEditor(editor, output_message);
    }
}

class OutputChannelDriver_CurrentFileCaret extends OutputChannelDriver_CurrentFile {
    constructor() {
        super(...arguments);
        this.title = "Current file: caret position";
    }
    /**
     * Inserts text into the given editor, at caret position.
     *
     * @param editor
     * @param output_message
     * @protected
     */
    insertIntoEditor(editor, output_message) {
        editor.replaceSelection(output_message);
    }
}

class OutputChannelDriver_CurrentFileTop extends OutputChannelDriver_CurrentFile {
    constructor() {
        super(...arguments);
        this.title = "Current file: top";
    }
    /**
     * Inserts text into the given editor, at top.
     *
     * @param editor
     * @param output_message
     * @protected
     */
    insertIntoEditor(editor, output_message) {
        const top_position = editor.offsetToPos(0);
        editor.replaceRange(output_message, top_position);
    }
}

class OutputChannelDriver_StatusBar extends OutputChannelDriver {
    constructor() {
        super(...arguments);
        this.title = "Status bar";
    }
    handle(output) {
        const status_bar_element = this.getStatusBarElement();
        // Combine stdout and stderr (in case both of them happen to be present).
        let stdout_and_stderr = joinObjectProperties(output, os.EOL + os.EOL).trim();
        // Full output (shown when hovering with mouse)
        status_bar_element.setAttr("aria-label", stdout_and_stderr);
        // Show last line permanently.
        const output_message_lines = stdout_and_stderr.split(/(\r\n|\r|\n)/);
        const last_output_line = output_message_lines[output_message_lines.length - 1];
        status_bar_element.setText(last_output_line);
    }
    getStatusBarElement() {
        if (!this.status_bar_element) {
            this.status_bar_element = this.plugin.addStatusBarItem();
        }
        return this.status_bar_element;
    }
}

class OutputChannelDriver_CurrentFileBottom extends OutputChannelDriver_CurrentFile {
    constructor() {
        super(...arguments);
        this.title = "Current file: bottom";
    }
    /**
     * Inserts text into the given editor, at bottom.
     *
     * @param editor
     * @param output_message
     * @protected
     */
    insertIntoEditor(editor, output_message) {
        const bottom_position = {
            ch: editor.getLine(editor.lastLine()).length,
            line: editor.lastLine(), // ... the last line.
        }; // *) But do not subtract 1, because ch is zero-based, so when .length is used without -1, we are pointing AFTER the last character.
        editor.replaceRange(output_message, bottom_position);
    }
}

class OutputChannelDriver_Clipboard extends OutputChannelDriver {
    constructor() {
        super(...arguments);
        this.title = "Clipboard";
    }
    handle(output) {
        // There can be both "stdout" and "stderr" present at the same time, or just one of them. If both are present, they
        // will be joined together with " " as a separator.
        let output_message = joinObjectProperties(output, " ");
        electron.clipboard.writeText(output_message);
        // Notify the user so they know a) what was copied to clipboard, and b) that their command has finished execution.
        this.plugin.newNotification("Copied to clipboard: " + os.EOL + output_message);
    }
}

let output_channel_drivers = {};
// Register output channel drivers
registerOutputChannelDriver("status-bar", new OutputChannelDriver_StatusBar());
registerOutputChannelDriver("notification", new OutputChannelDriver_Notification());
registerOutputChannelDriver("current-file-caret", new OutputChannelDriver_CurrentFileCaret());
registerOutputChannelDriver("current-file-top", new OutputChannelDriver_CurrentFileTop());
registerOutputChannelDriver("current-file-bottom", new OutputChannelDriver_CurrentFileBottom());
registerOutputChannelDriver("clipboard", new OutputChannelDriver_Clipboard());
function handleShellCommandOutput(plugin, shell_command_configuration, stdout, stderr, error_code) {
    // Terminology: Stream = outputs stream from a command, can be "stdout" or "stderr". Channel = a method for this application to present the output ot user, e.g. "notification".
    // Insert stdout and stderr to an object in a correct order
    let output = {};
    if (stdout.length && stderr.length) {
        // Both stdout and stderr have content
        // Decide the output order == Find out which data stream should be processed first, stdout or stderr.
        switch (shell_command_configuration.output_channel_order) {
            case "stdout-first":
                output = {
                    stdout: stdout,
                    stderr: stderr,
                };
                break;
            case "stderr-first":
                output = {
                    stderr: stderr,
                    stdout: stdout,
                };
                break;
        }
    }
    else if (stdout.length) {
        // Only stdout has content
        output = {
            stdout: stdout,
        };
    }
    else if (stderr.length) {
        // Only stderr has content
        output = {
            stderr: stderr,
        };
    }
    else {
        // Neither stdout nor stderr have content
        // Do nothing
        return;
    }
    // Should stderr be processed same time with stdout?
    if (shell_command_configuration.output_channels.stdout === shell_command_configuration.output_channels.stderr) {
        // Stdout and stderr use the same channel.
        // Make one handling call.
        handle_stream(plugin, shell_command_configuration, shell_command_configuration.output_channels.stdout, output, error_code);
    }
    else {
        // Stdout and stderr use different channels.
        // Make two handling calls.
        let output_stream_name;
        for (output_stream_name in output) {
            let output_channel_name = shell_command_configuration.output_channels[output_stream_name];
            let output_message = output[output_stream_name];
            let separated_output = {};
            separated_output[output_stream_name] = output_message;
            handle_stream(plugin, shell_command_configuration, output_channel_name, separated_output, error_code);
        }
    }
}
function handle_stream(plugin, shell_command_configuration, output_channel_name, output, error_code) {
    // Check if the output should be ignored
    if ("ignore" !== output_channel_name) {
        // The output should not be ignored.
        // Check that an output driver exists
        if (undefined === output_channel_drivers[output_channel_name]) {
            throw new Error("No output driver found for channel '" + output_channel_name + "'.");
        }
        let driver = output_channel_drivers[output_channel_name];
        // Perform handling the output
        driver.initialize(plugin);
        driver.handle(output, error_code);
    }
}
function getOutputChannelDriversOptionList(output_stream) {
    let list = { ignore: "Ignore" };
    for (let name in output_channel_drivers) {
        list[name] = output_channel_drivers[name].getTitle(output_stream);
    }
    return list;
}
function registerOutputChannelDriver(name, driver) {
    if (undefined !== output_channel_drivers[name]) {
        throw new Error("OutputChannelDriver named '" + name + "' is already registered!");
    }
    output_channel_drivers[name] = driver;
}

class ShellCommandExtraOptionsModal extends obsidian.Modal {
    constructor(app, plugin, shell_command_id, setting_group, setting_tab) {
        super(app);
        this.plugin = plugin;
        this.shell_command_id = shell_command_id;
        this.shell_command_configuration = plugin.getShellCommands()[shell_command_id];
        this.name_setting = setting_group.name_setting;
        this.setting_tab = setting_tab;
    }
    onOpen() {
        this.modalEl.createEl("h2", { text: this.shell_command_configuration.shell_command });
        // Alias field
        new obsidian.Setting(this.modalEl)
            .setName("Alias")
            .setClass("shell-commands-name-setting");
        let alias_setting = new obsidian.Setting(this.modalEl)
            .addText(text => text
            .setValue(this.shell_command_configuration.alias)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            // Change the actual alias value
            this.shell_command_configuration.alias = value;
            // Update Obsidian command palette
            this.plugin.obsidian_commands[this.shell_command_id].name = this.plugin.generateObsidianCommandName(this.shell_command_configuration);
            // UpdateShell commands settings panel
            this.name_setting.setName(this.setting_tab.generateCommandFieldName(this.shell_command_id, this.shell_command_configuration));
            // Save
            yield this.plugin.saveSettings();
        })))
            .setClass("shell-commands-shell-command-setting");
        alias_setting.controlEl.find("input").focus(); // Focus without a need to click the field.
        this.modalEl.createEl("p", { text: "If not empty, the alias will be displayed in the command palette instead of the actual command. An alias is never executed as a command." });
        this.modalEl.createEl("p", { text: "You can also use the same {{}} style variables in aliases that are used in shell commands. When variables are used in aliases, they do not affect the command execution in any way, but it's a nice way to reveal what values your command will use, even when an alias hides most of the other technical details." });
        // Confirm execution field
        new obsidian.Setting(this.modalEl)
            .setName("Ask confirmation before execution")
            .addToggle(toggle => toggle
            .setValue(this.shell_command_configuration.confirm_execution)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.shell_command_configuration.confirm_execution = value;
            let icon_container = this.name_setting.nameEl.find("span.shell-commands-confirm-execution-icon-container");
            if (this.shell_command_configuration.confirm_execution) {
                // Show icon
                icon_container.removeClass("shell-commands-hide");
            }
            else {
                // Hide icon
                icon_container.addClass("shell-commands-hide");
            }
            yield this.plugin.saveSettings();
        })));
        // Output channeling
        this.newOutputChannelSetting("Output channel for stdout", "stdout");
        this.newOutputChannelSetting("Output channel for stderr", "stderr", "If both stdout and stderr use the same channel, stderr will be combined to same message with stdout.");
        new obsidian.Setting(this.modalEl)
            .setName("Order of stdout/stderr output")
            .setDesc("When output contains both errors and normal output, which one should be presented first?")
            .addDropdown(dropdown => dropdown
            .addOptions({
            "stdout-first": "Stdout first, then stderr.",
            "stderr-first": "Stderr first, then stdout.",
        })
            .setValue(this.shell_command_configuration.output_channel_order)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.shell_command_configuration.output_channel_order = value;
            yield this.plugin.saveSettings();
        })));
        // Ignore errors field
        new obsidian.Setting(this.modalEl)
            .setName("Ignore error codes")
            .setDesc("A comma separated list of numbers. If executing a shell command fails with one of these exit codes, no error message will be displayed, and the above stderr channel will be ignored. Stdout channel will still be used for stdout. Error codes must be integers and greater than or equal to 1. Anything else will be removed.")
            .addText(text => text
            .setValue(this.shell_command_configuration.ignore_error_codes.join(","))
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            // Parse the string of comma separated numbers
            let ignore_error_codes = [];
            let raw_error_codes = value.split(",");
            for (let i in raw_error_codes) {
                let raw_error_code = raw_error_codes[i];
                let error_code_candidate = parseInt(raw_error_code.trim()); // E.g. an empty string converts to NaN (= Not a Number).
                // Ensure that the error code is not NaN, 0 or a negative number.
                if (!isNaN(error_code_candidate) && error_code_candidate >= 1) {
                    // The candidate is legit.
                    ignore_error_codes.push(error_code_candidate);
                }
            }
            // Save the validated error numbers
            this.shell_command_configuration.ignore_error_codes = ignore_error_codes;
            yield this.plugin.saveSettings();
            // Update icon
            let icon_container = this.name_setting.nameEl.find("span.shell-commands-ignored-error-codes-icon-container");
            if (this.shell_command_configuration.ignore_error_codes.length) {
                // Show icon
                icon_container.setAttr("aria-label", this.setting_tab.generateIgnoredErrorCodesIconTitle(this.shell_command_configuration.ignore_error_codes));
                icon_container.removeClass("shell-commands-hide");
            }
            else {
                // Hide icon
                icon_container.addClass("shell-commands-hide");
            }
        })));
    }
    newOutputChannelSetting(title, output_stream_name, description = "") {
        let output_channel_options = getOutputChannelDriversOptionList(output_stream_name);
        new obsidian.Setting(this.modalEl)
            .setName(title)
            .setDesc(description)
            .addDropdown(dropdown => dropdown
            .addOptions(output_channel_options)
            .setValue(this.shell_command_configuration.output_channels[output_stream_name])
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.shell_command_configuration.output_channels[output_stream_name] = value;
            yield this.plugin.saveSettings();
        })));
    }
}
ShellCommandExtraOptionsModal.OPTIONS_SUMMARY = "Alias, Output, Confirmation, Ignore errors";

class ShellCommandDeleteModal extends obsidian.Modal {
    constructor(plugin, shell_command_id, setting_group, container_element) {
        super(plugin.app);
        this.plugin = plugin;
        this.shell_command_id = shell_command_id;
        this.shell_command_configuration = plugin.getShellCommands()[shell_command_id];
        this.setting_group = setting_group;
        this.container_element = container_element;
    }
    onOpen() {
        this.modalEl.createEl("h2", { text: "Delete: " + this.shell_command_configuration.shell_command });
        if (this.shell_command_configuration.alias) {
            this.modalEl.createEl("p", { text: "Alias: " + this.shell_command_configuration.alias });
        }
        this.modalEl.createEl("p", { text: "Are you sure you want to delete this shell command?" });
        let delete_button = this.modalEl.createEl("button", { text: "Yes, delete" });
        delete_button.onclick = () => __awaiter(this, void 0, void 0, function* () {
            // Remove the command
            console.log("Command " + this.shell_command_id + " gonna be removed.");
            delete this.plugin.getShellCommands()[this.shell_command_id]; // Remove from the plugin's settings.
            delete this.plugin.obsidian_commands[this.shell_command_id]; // Remove from the command palette.
            // Remove the setting fields
            this.container_element.removeChild(this.setting_group.name_setting.settingEl);
            this.container_element.removeChild(this.setting_group.shell_command_setting.settingEl);
            this.container_element.removeChild(this.setting_group.preview_setting.settingEl);
            yield this.plugin.saveSettings();
            console.log("Command removed.");
            this.close();
        });
    }
}

function getHotkeysForShellCommand(plugin, shell_command_id) {
    var _a, _b;
    // Retrieve all hotkeys set by user.
    // @ts-ignore
    let app_custom_hotkeys = (_a = plugin.app.hotkeyManager) === null || _a === void 0 ? void 0 : _a.customKeys;
    if (!app_custom_hotkeys) {
        console.log("getHotkeysForShellCommand() failed, will return an empty array.");
        return [];
    }
    // Get only our hotkeys.
    let hotkey_index = plugin.getPluginId() + ":" + plugin.generateObsidianCommandId(shell_command_id); // E.g. "obsidian-shellcommands:shell-command-0"
    console.log("getHotkeysForShellCommand() succeeded.");
    return (_b = app_custom_hotkeys[hotkey_index]) !== null && _b !== void 0 ? _b : []; // If no hotkey array is set for this command, return an empty array. Although I do believe that all commands do have an array anyway, but have this check just in case.
}
/**
 * TODO: Is there a way to make Obsidian do this conversion for us?
 *
 * @param hotkey
 * @constructor
 */
function HotkeyToString(hotkey) {
    let keys = [];
    hotkey.modifiers.forEach((modifier) => {
        let modifier_key = modifier.toString(); // This is one of 'Mod' | 'Ctrl' | 'Meta' | 'Shift' | 'Alt'
        if ("Mod" === modifier_key) {
            // Change "Mod" to something more meaningful.
            modifier_key = obsidian.Platform.isMacOS ? "Cmd" : "Ctrl"; // isMacOS should also be true if the device is iPhone/iPad. Can be handy if this plugin gets mobile support some day.
        }
        keys.push(modifier_key);
    });
    keys.push(hotkey.key); // This is something like a letter ('A', 'B' etc) or space/enter/whatever.
    return keys.join(" + ");
}

class ShellCommandsSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.scroll_position = 0;
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: "Shell commands" });
        // "Working directory" field
        new obsidian.Setting(containerEl)
            .setName("Working directory")
            .setDesc("A directory where your commands will be run. If empty, defaults to your vault's location. Can be relative (= a folder in the vault) or absolute (= complete from filesystem root).")
            .addText(text => text
            .setPlaceholder(getVaultAbsolutePath(this.app))
            .setValue(this.plugin.settings.working_directory)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log("Changing working_directory to " + value);
            this.plugin.settings.working_directory = value;
            yield this.plugin.saveSettings();
        })));
        // A <div> element for all command input fields. New command fields can be created at the bottom of this element.
        let command_fields_container = containerEl.createEl("div");
        // Fields for modifying existing commands
        for (let command_id in this.plugin.getShellCommands()) {
            this.createCommandField(command_fields_container, command_id);
        }
        // "New command" button
        new obsidian.Setting(containerEl)
            .addButton(button => button
            .setButtonText("New command")
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.createCommandField(command_fields_container, "new");
            console.log("New empty command created.");
        })));
        // "Error message duration" field
        this.createNotificationDurationField(containerEl, "Error message duration", "Concerns messages about failed shell commands.", "error_message_duration");
        // "Notification message duration" field
        this.createNotificationDurationField(containerEl, "Notification message duration", "Concerns informational, non fatal messages, e.g. output directed to 'Notification balloon'.", "notification_message_duration");
        // "Variables" section
        containerEl.createEl("h2", { text: "Variables" });
        // "Preview variables in command palette" field
        new obsidian.Setting(containerEl)
            .setName("Preview variables in command palette")
            .setDesc("If on, variable names are substituted with their realtime values when you view your commands in the command palette. A nice way to ensure your commands will use correct values.")
            .addToggle(checkbox => checkbox
            .setValue(this.plugin.settings.preview_variables_in_command_palette)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log("Changing preview_variables_in_command_palette to " + value);
            this.plugin.settings.preview_variables_in_command_palette = value;
            if (!value) {
                // Variable previewing is turned from on to off.
                // This means that the command palette may have old, stale variable data in it (if a user has opened the palette, but closed it without executing anything).
                // Remove old, preparsed variable data and reset shell commands' names in the command palette.
                this.plugin.resetPreparsedShellCommandConfigurations();
                this.plugin.resetCommandPaletteNames();
            }
            yield this.plugin.saveSettings();
        })));
        // Variable instructions
        getShellCommandVariableInstructions().forEach((instructions) => {
            let paragraph = containerEl.createEl("p");
            // @ts-ignore
            paragraph.createEl("strong", { text: instructions.variable_name + " " });
            // @ts-ignore
            paragraph.createEl("span", { text: instructions.instructions });
        });
        containerEl.createEl("p", { text: "When you type variables into commands, a preview text appears under the command field to show how the command will look like when it gets executed with variables substituted with their real values." });
        containerEl.createEl("p", { text: "There is no way to escape variable parsing. If you need {{ }} characters in your command, they won't be parsed as variables as long as they do not contain any of the variable names listed below. If you would need to pass e.g. {{title}} literally to your command, there is no way to do it atm, please raise an issue in GitHub." });
        containerEl.createEl("p", { text: "All variables that access the current file, may cause the command preview to fail if you had no file panel active when you opened the settings window - e.g. you had focus on graph view instead of a note = no file is currently active. But this does not break anything else than the preview." });
        // KEEP THIS AFTER CREATING ALL ELEMENTS:
        this.rememberScrollPosition(containerEl);
    }
    /**
     *
     * @param container_element
     * @param shell_command_id Either a string formatted integer ("0", "1" etc) or "new" if it's a field for a command that does not exist yet.
     */
    createCommandField(container_element, shell_command_id) {
        let is_new = "new" === shell_command_id;
        let shell_command_configuration;
        if (is_new) {
            // Create an empty command
            shell_command_id = this.plugin.generateNewShellCommandID();
            shell_command_configuration = newShellCommandConfiguration();
            this.plugin.getShellCommands()[shell_command_id] = shell_command_configuration;
            // Register the empty shell command to Obsidian's command palette.
            // Do it already now, because there are settings (e.g. Alias) that, when changed by the user, will try to modify the Obsidian command. Sometimes users edit these settings before writing the actual command. See issue #46: https://github.com/Taitava/obsidian-shellcommands/issues/46
            this.plugin.registerShellCommand(shell_command_id, shell_command_configuration);
        }
        else {
            // Use an old shell command
            shell_command_configuration = this.plugin.getShellCommands()[shell_command_id];
        }
        console.log("Create command field for command #" + shell_command_id + (is_new ? " (NEW)" : ""));
        let shell_command;
        if (is_new) {
            shell_command = "";
        }
        else {
            shell_command = shell_command_configuration.shell_command;
        }
        let setting_group = {
            name_setting: new obsidian.Setting(container_element)
                .setName(this.generateCommandFieldName(shell_command_id, this.plugin.getShellCommands()[shell_command_id]))
                .addExtraButton(button => button
                .setTooltip("Execute now")
                .setIcon("run-command")
                .onClick(() => {
                // Execute the shell command now (for trying it out in the settings)
                let shell_command_configuration = this.plugin.getShellCommands()[shell_command_id];
                let parsed_shell_command = parseShellCommandVariables(this.plugin, shell_command_configuration.shell_command);
                if (Array.isArray(parsed_shell_command)) {
                    this.plugin.newErrors(parsed_shell_command);
                }
                else {
                    this.plugin.confirmAndExecuteShellCommand(parsed_shell_command, shell_command_configuration);
                }
            }))
                .addExtraButton(button => button
                .setTooltip(ShellCommandExtraOptionsModal.OPTIONS_SUMMARY)
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                // Open an extra options modal
                let modal = new ShellCommandExtraOptionsModal(this.app, this.plugin, shell_command_id, setting_group, this);
                modal.open();
            })))
                .addExtraButton(button => button
                .setTooltip("Delete this shell command")
                .setIcon("trash")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                // Open a delete modal
                let modal = new ShellCommandDeleteModal(this.plugin, shell_command_id, setting_group, container_element);
                modal.open();
            })))
                .setClass("shell-commands-name-setting"),
            shell_command_setting: new obsidian.Setting(container_element)
                .addText(text => text
                .setPlaceholder("Enter your command")
                .setValue(shell_command)
                .onChange((field_value) => __awaiter(this, void 0, void 0, function* () {
                let shell_command = field_value;
                setting_group.preview_setting.setDesc(this.getShellCommandPreview(shell_command));
                if (is_new) {
                    console.log("Creating new command " + shell_command_id + ": " + shell_command);
                }
                else {
                    console.log("Command " + shell_command_id + " gonna change to: " + shell_command);
                }
                // Do this in both cases, when creating a new command and when changing an old one:
                shell_command_configuration.shell_command = shell_command;
                if (is_new) {
                    // Create a new command
                    this.plugin.registerShellCommand(shell_command_id, shell_command_configuration);
                    console.log("Command created.");
                }
                else {
                    // Change an old command
                    this.plugin.obsidian_commands[shell_command_id].name = this.plugin.generateObsidianCommandName(this.plugin.getShellCommands()[shell_command_id]); // Change the command's name in Obsidian's command palette.
                    console.log("Command changed.");
                }
                yield this.plugin.saveSettings();
            })))
                .setClass("shell-commands-shell-command-setting"),
            preview_setting: new obsidian.Setting(container_element)
                .setDesc(this.getShellCommandPreview(shell_command))
                .setClass("shell-commands-preview-setting"),
        };
        // Informational icons (= non-clickable)
        let icon_container = setting_group.name_setting.nameEl.createEl("span", { attr: { class: "shell-commands-main-icon-container" } });
        // "Ask confirmation" icon.
        let confirm_execution_icon_container = icon_container.createEl("span", { attr: { "aria-label": "Asks confirmation before execution.", class: "shell-commands-confirm-execution-icon-container" } });
        obsidian.setIcon(confirm_execution_icon_container, "languages");
        if (!shell_command_configuration.confirm_execution) {
            // Do not display the icon for commands that do not use confirmation.
            confirm_execution_icon_container.addClass("shell-commands-hide");
        }
        // "Ignored error codes" icon
        let ignored_error_codes_icon_container = icon_container.createEl("span", { attr: { "aria-label": this.generateIgnoredErrorCodesIconTitle(shell_command_configuration.ignore_error_codes), class: "shell-commands-ignored-error-codes-icon-container" } });
        obsidian.setIcon(ignored_error_codes_icon_container, "strikethrough-glyph");
        if (!shell_command_configuration.ignore_error_codes.length) {
            // Do not display the icon for commands that do not ignore any errors.
            ignored_error_codes_icon_container.addClass("shell-commands-hide");
        }
        // Add hotkey information
        if (!is_new) {
            let hotkeys = getHotkeysForShellCommand(this.plugin, shell_command_id);
            if (hotkeys) {
                let hotkeys_joined = "";
                hotkeys.forEach((hotkey) => {
                    if (hotkeys_joined) {
                        hotkeys_joined += "<br>";
                    }
                    hotkeys_joined += HotkeyToString(hotkey);
                });
                let hotkey_div = setting_group.preview_setting.controlEl.createEl("div", { attr: { class: "setting-item-description shell-commands-hotkey-info" } });
                // Comment out the icon because it would look like a clickable button (as there are other clickable icons in the settings).
                // setIcon(hotkey_div, "any-key", 22); // Hotkey icon
                hotkey_div.insertAdjacentHTML("beforeend", " " + hotkeys_joined);
            }
        }
        console.log("Created.");
    }
    createNotificationDurationField(container_element, title, description, setting_name) {
        new obsidian.Setting(container_element)
            .setName(title)
            .setDesc(description + " In seconds, between 1 and 180.")
            .addText(field => field
            .setValue(String(this.plugin.settings[setting_name]))
            .onChange((duration_string) => __awaiter(this, void 0, void 0, function* () {
            let duration = parseInt(duration_string);
            if (duration >= 1 && duration <= 180) {
                console.log("Change " + setting_name + " from " + this.plugin.settings[setting_name] + " to " + duration);
                this.plugin.settings[setting_name] = duration;
                yield this.plugin.saveSettings();
                console.log("Changed.");
            }
            // Don't show a notice if duration is not between 1 and 180, because this function is called every time a user types in this field, so the value might not be final.
        })));
    }
    getShellCommandPreview(shell_command) {
        let parsed_shell_command = parseShellCommandVariables(this.plugin, shell_command); // false: disables notifications if variables have syntax errors.
        if (Array.isArray(parsed_shell_command)) {
            // Variable parsing failed.
            // Return just the first error message, even if there are multiple errors, because the preview space is limited.
            return parsed_shell_command[0];
        }
        // Variable parsing succeeded
        return parsed_shell_command;
    }
    rememberScrollPosition(container_element) {
        container_element.scrollTo({
            top: this.scroll_position,
            behavior: "auto",
        });
        container_element.addEventListener("scroll", (event) => {
            this.scroll_position = container_element.scrollTop;
        });
    }
    /**
     * @param shell_command_id String like "0" or "1" etc.
     * @param shell_command_configuration
     * @public Public because ShellCommandExtraOptionsModal uses this too.
     */
    generateCommandFieldName(shell_command_id, shell_command_configuration) {
        if (shell_command_configuration.alias) {
            return shell_command_configuration.alias;
        }
        return "Command #" + shell_command_id;
    }
    /**
     * @param ignored_error_codes
     * @public Public because ShellCommandExtraOptionsModal uses this too.
     */
    generateIgnoredErrorCodesIconTitle(ignored_error_codes) {
        let plural = ignored_error_codes.length !== 1 ? "s" : "";
        return "Ignored error" + plural + ": " + ignored_error_codes.join(",");
    }
}

class ConfirmExecutionModal extends obsidian.Modal {
    constructor(plugin, shell_command, shell_command_configuration) {
        super(plugin.app);
        this.plugin = plugin;
        this.shell_command = shell_command;
        this.shell_command_configuration = shell_command_configuration;
    }
    open() {
        super.open();
        // Information about the shell command
        this.modalEl.createEl("h2", { text: this.shell_command, attr: { style: "margin-bottom: 0;" } });
        if (this.shell_command_configuration.alias) {
            this.modalEl.createEl("p", { text: "Alias: " + this.shell_command_configuration.alias, attr: { style: "margin-top: 0;" } });
        }
        this.modalEl.createEl("p", { text: "Execute this shell command?" });
        // Execute button
        new obsidian.Setting(this.modalEl)
            .addButton(button => button
            .setButtonText("Yes, execute!")
            .onClick(() => {
            console.log("User confirmed execution of shell command: " + this.shell_command);
            this.plugin.executeShellCommand(this.shell_command, this.shell_command_configuration);
            this.close();
        }));
    }
}

class ShellCommandsPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.obsidian_commands = {};
        /**
         * Temporary holder for ShellCommandConfigurations whose variables are already parsed before the actual execution during command palette preview.
         * This array gets emptied after every shell command execution.
         *
         * @private
         */
        this.preparsed_shell_command_configurations = {};
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            yield this.loadSettings();
            // Run possible configuration migrations
            yield RunMigrations(this);
            // Make all defined shell commands to appear in the Obsidian command list
            let shell_commands = this.getShellCommands();
            for (let command_id in shell_commands) {
                let shell_command_configuration = shell_commands[command_id];
                this.registerShellCommand(command_id, shell_command_configuration);
            }
            this.addSettingTab(new ShellCommandsSettingsTab(this.app, this));
        });
    }
    getShellCommands() {
        return this.settings.shell_commands;
    }
    /**
     *
     * @param command_id string, but in practise it's a number in a string format, e.g. "0" or "1" etc.
     * @param shell_command_configuration
     */
    registerShellCommand(command_id, shell_command_configuration) {
        console.log("Registering shell command #" + command_id + " (" + shell_command_configuration.shell_command + ") to Obsidian...");
        let obsidian_command = {
            id: this.generateObsidianCommandId(command_id),
            name: this.generateObsidianCommandName(shell_command_configuration),
            // Use 'checkCallback' instead of normal 'callback' because we also want to get called when the command palette is opened.
            checkCallback: (is_opening_command_palette) => {
                if (is_opening_command_palette) {
                    // The user is currently opening the command palette.
                    // Do not execute the command yet, but parse variables for preview, if enabled in the settings.
                    if (this.settings.preview_variables_in_command_palette) {
                        let preparsed_shell_command_configuration = cloneObject(shell_command_configuration); // Clone shell_command_configuration so that we won't edit the original object.
                        // Parse variables in the actual shell command
                        let parsed_shell_command = parseShellCommandVariables(this, preparsed_shell_command_configuration.shell_command);
                        if (Array.isArray(parsed_shell_command)) {
                            // Variable parsing failed, because an array was returned, which contains error messages.
                            // Just cancel the preview, the command will be shown with variable names. Discard the error messages.
                            console.log("Shell command preview: Variable parsing failed for shell command " + preparsed_shell_command_configuration.shell_command);
                            return true;
                        }
                        else {
                            // Variable parsing succeeded.
                            // Use the parsed values.
                            preparsed_shell_command_configuration.shell_command = parsed_shell_command;
                        }
                        // Also parse variables in an alias, in case the command has one. Variables in aliases do not do anything practical, but they can reveal the user what variables are used in the command.
                        let parsed_alias = parseShellCommandVariables(this, preparsed_shell_command_configuration.alias);
                        if (Array.isArray(parsed_alias)) {
                            // Variable parsing failed, because an array was returned, which contains error messages.
                            // Just cancel the preview, the alias will be shown with variable names. Discard the error messages.
                            console.log("Shell command preview: Variable parsing failed for alias " + preparsed_shell_command_configuration.alias);
                            return true;
                        }
                        else {
                            // Variable parsing succeeded.
                            // Use the parsed values.
                            preparsed_shell_command_configuration.alias = parsed_alias;
                        }
                        // Rename the command in command palette
                        let prefix = this.getPluginName() + ": "; // Normally Obsidian prefixes all commands with the plugin name automatically, but now that we are actually _editing_ a command in the palette (not creating a new one), Obsidian won't do the prefixing for us.
                        obsidian_command.name = prefix + this.generateObsidianCommandName(preparsed_shell_command_configuration);
                        // Store the preparsed shell command so that we can use exactly the same values if the command gets later executed.
                        this.preparsed_shell_command_configurations[command_id] = preparsed_shell_command_configuration;
                    }
                    return true; // Need to return true, otherwise the command would be left out from the command palette.
                }
                else {
                    // The user has instructed to execute the command.
                    // Check if we happen to have a preparsed command (= variables parsed at the time of opening the command palette)
                    if (undefined === this.preparsed_shell_command_configurations[command_id]) {
                        // No preparsed command. Execute a standard version of the command, and do variable parsing now.
                        let parsed_shell_command = parseShellCommandVariables(this, shell_command_configuration.shell_command);
                        if (Array.isArray(parsed_shell_command)) {
                            // The command could not be parsed correctly.
                            // Display error messages
                            this.newErrors(parsed_shell_command);
                        }
                        else {
                            // The command was parsed correctly.
                            this.confirmAndExecuteShellCommand(parsed_shell_command, shell_command_configuration);
                        }
                    }
                    else {
                        // We do have a preparsed version of this command.
                        // No need to check if the parsing had previously succeeded, because if it would have failed, the command would not be in the preparsed commands' array.
                        this.confirmAndExecuteShellCommand(this.preparsed_shell_command_configurations[command_id].shell_command, shell_command_configuration);
                    }
                    // Delete the whole array of preparsed commands. Even though we only used just one command from it, we need to notice that opening a command
                    // palette might generate multiple preparsed commands in the array, but as the user selects and executes only one command, all these temporary
                    // commands are now obsolete. Delete them just in case the user toggles the variable preview feature off in the settings. We do not want to
                    // execute obsolete commands accidentally. This deletion also needs to be done even if the executed command was not a preparsed command, because
                    // even when preparsing is turned on in the settings, singular commands may fail to parse and therefore they would not be in this array, but other
                    // commands might be.
                    this.resetPreparsedShellCommandConfigurations();
                }
            }
        };
        this.addCommand(obsidian_command);
        this.obsidian_commands[command_id] = obsidian_command; // Store the reference so that we can edit the command later in ShellCommandsSettingsTab if needed.
        console.log("Registered.");
    }
    /**
     * Called when it's known that preparsed shell command variables have old data and should not be used later.
     */
    resetPreparsedShellCommandConfigurations() {
        this.preparsed_shell_command_configurations = {};
    }
    /**
     * Called after turning "Preview variables in command palette" setting off, to make sure that all shell commands have {{variable}} names visible instead of their values.
     */
    resetCommandPaletteNames() {
        let shell_commands = this.getShellCommands();
        for (let shell_command_id in shell_commands) {
            let shell_command_configuration = shell_commands[shell_command_id];
            this.obsidian_commands[shell_command_id].name = this.generateObsidianCommandName(shell_command_configuration);
        }
    }
    generateObsidianCommandId(shell_command_id) {
        return "shell-command-" + shell_command_id;
    }
    generateObsidianCommandName(shell_command_configuration) {
        let prefix = "Execute: ";
        if (shell_command_configuration.alias) {
            // If an alias is set for the command, Obsidian's command palette should display the alias text instead of the actual command.
            return prefix + shell_command_configuration.alias;
        }
        return prefix + shell_command_configuration.shell_command;
    }
    /**
     *
     * @param shell_command The actual shell command that will be executed.
     * @param shell_command_configuration Used for reading other properties. shell_command_configuration.shell_command won't be used!
     */
    confirmAndExecuteShellCommand(shell_command, shell_command_configuration) {
        // Check if the command needs confirmation before execution
        if (shell_command_configuration.confirm_execution) {
            // Yes, a confirmation is needed.
            // Open a confirmation modal.
            new ConfirmExecutionModal(this, shell_command, shell_command_configuration)
                .open();
            return; // Do not execute now. The modal will call executeShellCommand() later if needed.
        }
        else {
            // No need to confirm.
            // Execute.
            this.executeShellCommand(shell_command, shell_command_configuration);
        }
    }
    /**
     * Does not ask for confirmation before execution. This should only be called if: a) a confirmation is already asked from a user, or b) this command is defined not to need a confirmation.
     * Use confirmAndExecuteShellCommand() instead to have a confirmation asked before the execution.
     *
     * @param shell_command The actual shell command that will be executed.
     * @param shell_command_configuration Used for reading other properties. shell_command_configuration.shell_command won't be used!
     */
    executeShellCommand(shell_command, shell_command_configuration) {
        let working_directory = this.getWorkingDirectory();
        // Check that the shell command is not empty
        shell_command = shell_command.trim();
        if (!shell_command.length) {
            // It is empty
            console.log("The shell command is empty. :(");
            this.newError("The shell command is empty :(");
            return;
        }
        // Check that the working directory exists and is a folder
        if (!fs__namespace.existsSync(working_directory)) {
            // Working directory does not exist
            // Prevent execution
            console.log("Working directory does not exist: " + working_directory);
            this.newError("Working directory does not exist: " + working_directory);
        }
        else if (!fs__namespace.lstatSync(working_directory).isDirectory()) {
            // Working directory is not a directory.
            // Prevent execution
            console.log("Working directory exists but is not a folder: " + working_directory);
            this.newError("Working directory exists but is not a folder: " + working_directory);
        }
        else {
            // Working directory is OK
            // Execute the shell command
            console.log("Executing command " + shell_command + " in " + working_directory + "...");
            child_process.exec(shell_command, {
                "cwd": working_directory
            }, (error, stdout, stderr) => {
                if (null !== error) {
                    // Some error occurred
                    console.log("Command executed and failed. Error number: " + error.code + ". Message: " + error.message);
                    // Check if this error should be displayed to the user or not
                    if (shell_command_configuration.ignore_error_codes.contains(error.code)) {
                        // The user has ignored this error.
                        console.log("User has ignored this error, so won't display it.");
                        // Handle only stdout output stream
                        handleShellCommandOutput(this, shell_command_configuration, stdout, "", null);
                    }
                    else {
                        // Show the error.
                        console.log("Will display the error to user.");
                        // Check that stderr actually contains an error message
                        if (!stderr.length) {
                            // Stderr is empty, so the error message is probably given by Node.js's child_process.
                            // Direct error.message to the stderr variable, so that the user can see error.message when stderr is unavailable.
                            stderr = error.message;
                        }
                        // Handle both stdout and stderr output streams
                        handleShellCommandOutput(this, shell_command_configuration, stdout, stderr, error.code);
                    }
                }
                else {
                    // No errors
                    console.log("Command executed without errors.");
                    // Handle output
                    handleShellCommandOutput(this, shell_command_configuration, stdout, stderr, 0); // Use zero as an error code instead of null (0 means no error). If stderr happens to contain something, exit code 0 gets displayed in an error balloon (if that is selected as a driver for stderr).
                }
            });
        }
    }
    getWorkingDirectory() {
        // Returns either a user defined working directory, or an automatically detected one.
        let working_directory = this.settings.working_directory;
        if (working_directory.length == 0) {
            // No working directory specified, so use the vault directory.
            return getVaultAbsolutePath(this.app);
        }
        else if (!path__namespace.isAbsolute(working_directory)) {
            // The working directory is relative.
            // Help to make it refer to the vault's directory. Without this, the relative path would refer to Obsidian's installation directory (at least on Windows).
            return path__namespace.join(getVaultAbsolutePath(this.app), working_directory);
        }
        return working_directory;
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    /**
     * @return string Returns "0" if there are no shell commands yet, otherwise returns the max ID + 1, as a string.
     */
    generateNewShellCommandID() {
        let existing_ids = Object.getOwnPropertyNames(this.getShellCommands());
        let new_id = 0;
        for (let i in existing_ids) {
            let existing_id = parseInt(existing_ids[i]);
            if (existing_id >= new_id) {
                new_id = existing_id + 1;
            }
        }
        return String(new_id);
    }
    getPluginId() {
        return this.manifest.id;
    }
    getPluginName() {
        return this.manifest.name;
    }
    newError(message) {
        new obsidian.Notice(message, this.settings.error_message_duration * 1000); // * 1000 = convert seconds to milliseconds.
    }
    newErrors(messages) {
        messages.forEach((message) => {
            this.newError(message);
        });
    }
    newNotification(message) {
        new obsidian.Notice(message, this.settings.notification_message_duration * 1000); // * 1000 = convert seconds to milliseconds.
    }
}

module.exports = ShellCommandsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
